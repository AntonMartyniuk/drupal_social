<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function socialbase_form_social_user_password_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['mail']['#prefix'] = '<div class="form__description">';
  $form['mail']['#suffix'] = '</div>';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Select the page layout a / b /c template based on the current route.
 */
function socialbase_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $page_suggestion = 'page_layout_a';
  $match = \Drupal::getContainer()->get('current_route_match')->getCurrentRouteMatch();
  $routename = $match->getRouteName();

  // Add node type to routename.
  if ($routename === 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (!is_object($node)){
      $node = node_load($node);
    }
    if (is_object($node)) {
      $routename .= '.' . $node->getType();
    }
  }

  switch($routename) {
    case "view.event_enrollments.view_enrollments";
      $page_suggestion = 'page_layout_b';
      break;

    case "entity.node.canonical.topic";
    case "entity.node.edit_form";
      $page_suggestion = 'page_layout_c';
      break;
  }
  $suggestions[] = $page_suggestion;
}

/**
 * Helper function to call all the process functions of a hook.
 *
 * @param $hook string function to preprocess (e.g. page).
 * @param $variables array template variables to handle.
 *
 * @see socialbase_preprocess_page_layout_a();
 */
function _socialbase_call_preprocess_page($hook, &$variables) {
  $theme_registry = theme_get_registry();
  if (isset($theme_registry['page']['preprocess functions']))
    foreach ($theme_registry['page']['preprocess functions'] as $preprocessor_function) {
      if (function_exists($preprocessor_function)) {
        $preprocessor_function($variables, $hook, $theme_registry['page']);
      }
    }
}


/**
 * Implements hook_preprocess_block().
 */
function socialbase_preprocess_block(&$variables) {
  $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array(
      '',
      '_'
    ), $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_preprocess_page().
 */

function socialbase_preprocess_page(&$variables) {
  // if we have the admin toolbar on our screen we need overrides for our styles.
  if ($variables['is_admin']) {
    $variables['#attached']['library'][] = 'socialbase/admin';
  }
}

/**
 * Implements socialbase_preprocess_page_layout_a().
 */
function socialbase_preprocess_page_layout_a(&$variables) {
  _socialbase_call_preprocess_page('page', $variables);

}

/**
 * Implements socialbase_preprocess_page_layout_a().
 */

function socialbase_preprocess_page_layout_b(&$variables) {
  _socialbase_call_preprocess_page('page', $variables);
}

/**
 * Implements socialbase_preprocess_page_layout_a().
 */

function socialbase_preprocess_page_layout_c(&$variables) {
  _socialbase_call_preprocess_page('page', $variables);
}

/**
 * Implements hook_theme().
 *
 * Bit of hacking to be able to call multiple page layout templates based on
 * routes.
 *
 * See @socialbase_theme_suggestions_menu_alter().
 */
function socialbase_theme() {
  $items = array();
  $items['page_layout_a'] = array(
    'template' => 'page--layout-a',
    'render element' => 'page',
    'base hook' => 'page',
  );
  $items['page_layout_b'] = array(
    'template' => 'page--layout-b',
    'render element' => 'page',
    'base hook' => 'page',
  );
  $items['page_layout_c'] = array(
    'template' => 'page--layout-c',
    'render element' => 'page',
    'base hook' => 'page',
  );
  return $items;
}

/**
 * Prepares variables for node templates.
 *
 * Default template: node.html.twig.
 *
 * Most themes use their own copy of node.html.twig. The default is located
 * inside "/core/modules/node/templates/node.html.twig". Look in there for the
 * full list of variables.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - node: The node object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function socialbase_preprocess_node(&$variables) {
  // Only add submitted data on teasers since we have the page hero block.
  if ($variables['view_mode'] === 'teaser') {
    $variables['display_submitted'] = TRUE;
  }
  if ($variables['view_mode'] === 'hero') {
    unset($variables['label']);
  }

  // Try to add unpublished as a article class for now when nodes are published
  // or unpublished.
  if ($variables['view_mode'] === 'teaser' || $variables['view_mode'] === 'full') {
    if (!$variables['elements']['#node']->isPublished()) {
      $variables['attributes']['class'][] = 'unpublished';
    }
  }
}


/**
 * Implements template_preprocess_image_style().
 */
function socialbase_preprocess_image_style(&$variables) {
  if($variables['style_name'] == 'profile_hero'){
    $variables['image']['#attributes']['class'][] = 'img-bordered';
    $variables['image']['#attributes']['class'][] = 'img-circle';
  }
  if($variables['style_name'] == 'micro'){
    $variables['image']['#attributes']['class'][] = 'img-small';
    $variables['image']['#attributes']['class'][] = 'img-circle';
  }
}
